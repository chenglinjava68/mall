<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.plateno.booking.internal.base.mapper.OrderMapper" >
  <resultMap id="BaseResultMap" type="com.plateno.booking.internal.base.pojo.Order" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="order_no" property="orderNo" jdbcType="VARCHAR" />
    <result column="amount" property="amount" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="sid" property="sid" jdbcType="INTEGER" />
    <result column="chanelid" property="chanelid" jdbcType="INTEGER" />
    <result column="item_id" property="itemId" jdbcType="INTEGER" />
    <result column="pay_type" property="payType" jdbcType="INTEGER" />
    <result column="pay_time" property="payTime" jdbcType="TIMESTAMP" />
    <result column="wait_pay_time" property="waitPayTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="up_time" property="upTime" jdbcType="TIMESTAMP" />
    <result column="point" property="point" jdbcType="INTEGER" />
    <result column="refund_amount" property="refundAmount" jdbcType="INTEGER" />
    <result column="refund_time" property="refundTime" jdbcType="TIMESTAMP" />
    <result column="pay_status" property="payStatus" jdbcType="INTEGER" />
    <result column="pay_money" property="payMoney" jdbcType="INTEGER" />
    <result column="deliver_time" property="deliverTime" jdbcType="TIMESTAMP" />
    <result column="refund_successtime" property="refundSuccesstime" jdbcType="TIMESTAMP" />
    <result column="refund_reason" property="refundReason" jdbcType="VARCHAR" />
    <result column="resource" property="resource" jdbcType="INTEGER" />
    <result column="refund_point" property="refundPoint" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="refund_fail_reason" property="refundFailReason" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, order_no, amount, name, mobile, member_id, sid, chanelid, item_id, pay_type, 
    pay_time, wait_pay_time, create_time, up_time, point, refund_amount, refund_time, 
    pay_status, pay_money, deliver_time, refund_successtime, refund_reason, resource, 
    refund_point, remark
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.plateno.booking.internal.base.pojo.OrderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from m_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from m_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from m_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.plateno.booking.internal.base.pojo.OrderExample" >
    delete from m_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.plateno.booking.internal.base.pojo.Order" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into m_order (order_no, amount, name, 
      mobile, member_id, sid, 
      chanelid, item_id, pay_type, 
      pay_time, wait_pay_time, create_time, 
      up_time, point, refund_amount, 
      refund_time, pay_status, pay_money, 
      deliver_time, refund_successtime, refund_reason, 
      resource, refund_point, remark
      )
    values (#{orderNo,jdbcType=VARCHAR}, #{amount,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{mobile,jdbcType=VARCHAR}, #{memberId,jdbcType=INTEGER}, #{sid,jdbcType=INTEGER}, 
      #{chanelid,jdbcType=INTEGER}, #{itemId,jdbcType=INTEGER}, #{payType,jdbcType=INTEGER}, 
      #{payTime,jdbcType=TIMESTAMP}, #{waitPayTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, 
      #{upTime,jdbcType=TIMESTAMP}, #{point,jdbcType=INTEGER}, #{refundAmount,jdbcType=INTEGER}, 
      #{refundTime,jdbcType=TIMESTAMP}, #{payStatus,jdbcType=INTEGER}, #{payMoney,jdbcType=INTEGER}, 
      #{deliverTime,jdbcType=TIMESTAMP}, #{refundSuccesstime,jdbcType=TIMESTAMP}, #{refundReason,jdbcType=VARCHAR}, 
      #{resource,jdbcType=INTEGER}, #{refundPoint,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.plateno.booking.internal.base.pojo.Order" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into m_order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderNo != null" >
        order_no,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="memberId != null" >
        member_id,
      </if>
      <if test="sid != null" >
        sid,
      </if>
      <if test="chanelid != null" >
        chanelid,
      </if>
      <if test="itemId != null" >
        item_id,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="payTime != null" >
        pay_time,
      </if>
      <if test="waitPayTime != null" >
        wait_pay_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="upTime != null" >
        up_time,
      </if>
      <if test="point != null" >
        point,
      </if>
      <if test="refundAmount != null" >
        refund_amount,
      </if>
      <if test="refundTime != null" >
        refund_time,
      </if>
      <if test="payStatus != null" >
        pay_status,
      </if>
      <if test="payMoney != null" >
        pay_money,
      </if>
      <if test="deliverTime != null" >
        deliver_time,
      </if>
      <if test="refundSuccesstime != null" >
        refund_successtime,
      </if>
      <if test="refundReason != null" >
        refund_reason,
      </if>
      <if test="resource != null" >
        resource,
      </if>
      <if test="refundPoint != null" >
        refund_point,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderNo != null" >
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="memberId != null" >
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="sid != null" >
        #{sid,jdbcType=INTEGER},
      </if>
      <if test="chanelid != null" >
        #{chanelid,jdbcType=INTEGER},
      </if>
      <if test="itemId != null" >
        #{itemId,jdbcType=INTEGER},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=INTEGER},
      </if>
      <if test="payTime != null" >
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="waitPayTime != null" >
        #{waitPayTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="upTime != null" >
        #{upTime,jdbcType=TIMESTAMP},
      </if>
      <if test="point != null" >
        #{point,jdbcType=INTEGER},
      </if>
      <if test="refundAmount != null" >
        #{refundAmount,jdbcType=INTEGER},
      </if>
      <if test="refundTime != null" >
        #{refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="payMoney != null" >
        #{payMoney,jdbcType=INTEGER},
      </if>
      <if test="deliverTime != null" >
        #{deliverTime,jdbcType=TIMESTAMP},
      </if>
      <if test="refundSuccesstime != null" >
        #{refundSuccesstime,jdbcType=TIMESTAMP},
      </if>
      <if test="refundReason != null" >
        #{refundReason,jdbcType=VARCHAR},
      </if>
      <if test="resource != null" >
        #{resource,jdbcType=INTEGER},
      </if>
      <if test="refundPoint != null" >
        #{refundPoint,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.plateno.booking.internal.base.pojo.OrderExample" resultType="java.lang.Integer" >
    select count(*) from m_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update m_order
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderNo != null" >
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.mobile != null" >
        mobile = #{record.mobile,jdbcType=VARCHAR},
      </if>
      <if test="record.memberId != null" >
        member_id = #{record.memberId,jdbcType=INTEGER},
      </if>
      <if test="record.sid != null" >
        sid = #{record.sid,jdbcType=INTEGER},
      </if>
      <if test="record.chanelid != null" >
        chanelid = #{record.chanelid,jdbcType=INTEGER},
      </if>
      <if test="record.itemId != null" >
        item_id = #{record.itemId,jdbcType=INTEGER},
      </if>
      <if test="record.payType != null" >
        pay_type = #{record.payType,jdbcType=INTEGER},
      </if>
      <if test="record.payTime != null" >
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.waitPayTime != null" >
        wait_pay_time = #{record.waitPayTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.upTime != null" >
        up_time = #{record.upTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.point != null" >
        point = #{record.point,jdbcType=INTEGER},
      </if>
      <if test="record.refundAmount != null" >
        refund_amount = #{record.refundAmount,jdbcType=INTEGER},
      </if>
      <if test="record.refundTime != null" >
        refund_time = #{record.refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payStatus != null" >
        pay_status = #{record.payStatus,jdbcType=INTEGER},
      </if>
      <if test="record.payMoney != null" >
        pay_money = #{record.payMoney,jdbcType=INTEGER},
      </if>
      <if test="record.deliverTime != null" >
        deliver_time = #{record.deliverTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.refundSuccesstime != null" >
        refund_successtime = #{record.refundSuccesstime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.refundReason != null" >
        refund_reason = #{record.refundReason,jdbcType=VARCHAR},
      </if>
      <if test="record.resource != null" >
        resource = #{record.resource,jdbcType=INTEGER},
      </if>
      <if test="record.refundPoint != null" >
        refund_point = #{record.refundPoint,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.refundFailReason != null" >
        refund_fail_reason = #{record.refundFailReason,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update m_order
    set id = #{record.id,jdbcType=INTEGER},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      mobile = #{record.mobile,jdbcType=VARCHAR},
      member_id = #{record.memberId,jdbcType=INTEGER},
      sid = #{record.sid,jdbcType=INTEGER},
      chanelid = #{record.chanelid,jdbcType=INTEGER},
      item_id = #{record.itemId,jdbcType=INTEGER},
      pay_type = #{record.payType,jdbcType=INTEGER},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      wait_pay_time = #{record.waitPayTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      up_time = #{record.upTime,jdbcType=TIMESTAMP},
      point = #{record.point,jdbcType=INTEGER},
      refund_amount = #{record.refundAmount,jdbcType=INTEGER},
      refund_time = #{record.refundTime,jdbcType=TIMESTAMP},
      pay_status = #{record.payStatus,jdbcType=INTEGER},
      pay_money = #{record.payMoney,jdbcType=INTEGER},
      deliver_time = #{record.deliverTime,jdbcType=TIMESTAMP},
      refund_successtime = #{record.refundSuccesstime,jdbcType=TIMESTAMP},
      refund_reason = #{record.refundReason,jdbcType=VARCHAR},
      resource = #{record.resource,jdbcType=INTEGER},
      refund_point = #{record.refundPoint,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.plateno.booking.internal.base.pojo.Order" >
    update m_order
    <set >
      <if test="orderNo != null" >
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="memberId != null" >
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="sid != null" >
        sid = #{sid,jdbcType=INTEGER},
      </if>
      <if test="chanelid != null" >
        chanelid = #{chanelid,jdbcType=INTEGER},
      </if>
      <if test="itemId != null" >
        item_id = #{itemId,jdbcType=INTEGER},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=INTEGER},
      </if>
      <if test="payTime != null" >
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="waitPayTime != null" >
        wait_pay_time = #{waitPayTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="upTime != null" >
        up_time = #{upTime,jdbcType=TIMESTAMP},
      </if>
      <if test="point != null" >
        point = #{point,jdbcType=INTEGER},
      </if>
      <if test="refundAmount != null" >
        refund_amount = #{refundAmount,jdbcType=INTEGER},
      </if>
      <if test="refundTime != null" >
        refund_time = #{refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        pay_status = #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="payMoney != null" >
        pay_money = #{payMoney,jdbcType=INTEGER},
      </if>
      <if test="deliverTime != null" >
        deliver_time = #{deliverTime,jdbcType=TIMESTAMP},
      </if>
      <if test="refundSuccesstime != null" >
        refund_successtime = #{refundSuccesstime,jdbcType=TIMESTAMP},
      </if>
      <if test="refundReason != null" >
        refund_reason = #{refundReason,jdbcType=VARCHAR},
      </if>
      <if test="resource != null" >
        resource = #{resource,jdbcType=INTEGER},
      </if>
      <if test="refundPoint != null" >
        refund_point = #{refundPoint,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.plateno.booking.internal.base.pojo.Order" >
    update m_order
    set order_no = #{orderNo,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      member_id = #{memberId,jdbcType=INTEGER},
      sid = #{sid,jdbcType=INTEGER},
      chanelid = #{chanelid,jdbcType=INTEGER},
      item_id = #{itemId,jdbcType=INTEGER},
      pay_type = #{payType,jdbcType=INTEGER},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      wait_pay_time = #{waitPayTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      up_time = #{upTime,jdbcType=TIMESTAMP},
      point = #{point,jdbcType=INTEGER},
      refund_amount = #{refundAmount,jdbcType=INTEGER},
      refund_time = #{refundTime,jdbcType=TIMESTAMP},
      pay_status = #{payStatus,jdbcType=INTEGER},
      pay_money = #{payMoney,jdbcType=INTEGER},
      deliver_time = #{deliverTime,jdbcType=TIMESTAMP},
      refund_successtime = #{refundSuccesstime,jdbcType=TIMESTAMP},
      refund_reason = #{refundReason,jdbcType=VARCHAR},
      resource = #{resource,jdbcType=INTEGER},
      refund_point = #{refundPoint,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select resultMap="BaseResultMap" parameterType="com.plateno.booking.internal.base.pojo.OrderExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from m_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
  
   <select id="getOrderByNo" resultMap="BaseResultMap" >
    select *
    from m_order
     where order_no= #{orderNo,jdbcType=VARCHAR}
  </select>
  
  <select id="getPre30Min" resultMap="BaseResultMap" >
    select *
    from m_order 
     where pay_status= #{status,jdbcType=INTEGER} and create_time &lt; date_sub(now(), interval 30 MINUTE)
  </select>
  
    <select id="getOrderByStatus" resultMap="BaseResultMap" >
    select *
    from m_order 
     where pay_status= #{status,jdbcType=INTEGER} and create_time &lt; date_sub(
				CURDATE(),
				INTERVAL #{day,jdbcType=INTEGER} day)
  </select>
  
  
  <select id="getPageOrders" resultMap="BaseResultMap" >
    select *
    from m_order 
     where 1=1
      <if test="record.requstPlatenoform != null &amp;&amp; record.requstPlatenoform == 1" >
        AND member_id = #{record.memberId,jdbcType=VARCHAR}
      </if>
	  <if test="record.orderNo != null &amp;&amp; record.orderNo != '' " >
        AND order_no = #{record.orderNo,jdbcType=VARCHAR}
      </if>
      <if test="record.mobile != null &amp;&amp; record.mobile != ''" >
        AND mobile = #{record.mobile,jdbcType=VARCHAR}
      </if>
      
      <if test="record.bookingStartDate != null &amp;&amp; record.bookingStartDate > 0 &amp;&amp; record.bookingEndDate != null &amp;&amp; record.bookingEndDate > 0" >
        AND create_time BETWEEN FROM_UNIXTIME(#{record.bookingStartDate,jdbcType=TIMESTAMP}/1000, '%Y-%m-%d 00:00:00')  AND FROM_UNIXTIME(#{record.bookingEndDate,jdbcType=TIMESTAMP}/1000, '%Y-%m-%d 23:59:59')
      </if>
      
       <if test="record.payStatus != null &amp;&amp; record.payStatus != ''" >
      AND pay_status = #{record.payStatus,jdbcType=VARCHAR}
      </if>
      
       <if test="record.resource != null" >
   	  AND resource = #{record.resource,jdbcType=INTEGER}
     </if>
     
     <if test="record.channelId != null" >
   	  AND chanelid = #{record.channelId,jdbcType=INTEGER}
     </if>
     
	  ORDER BY create_time desc
	<if test="record.showLimit" >
        LIMIT #{record.pageNo,jdbcType=INTEGER} ,#{record.pageNumber,jdbcType=INTEGER}
    </if>
				
				
  </select>
  
  <select id="getCountOrder" resultType="java.lang.Integer" >
    select count(*)
    from m_order 
     where 1=1
      <if test="record.requstPlatenoform != null &amp;&amp; record.requstPlatenoform == 1" >
        AND member_id = #{record.memberId,jdbcType=VARCHAR}
      </if>
	  <if test="record.orderNo != null &amp;&amp; record.orderNo != '' " >
        AND order_no = #{record.orderNo,jdbcType=VARCHAR}
      </if>
      <if test="record.mobile != null &amp;&amp; record.mobile != ''" >
        AND mobile = #{record.mobile,jdbcType=VARCHAR}
      </if>
      
      <if test="record.bookingStartDate != null &amp;&amp; record.bookingStartDate > 0 &amp;&amp; record.bookingEndDate != null &amp;&amp; record.bookingEndDate > 0" >
        AND create_time BETWEEN FROM_UNIXTIME(#{record.bookingStartDate,jdbcType=TIMESTAMP}/1000, '%Y-%m-%d 00:00:00')  AND FROM_UNIXTIME(#{record.bookingEndDate,jdbcType=TIMESTAMP}/1000, '%Y-%m-%d 23:59:59')
      </if>
      
        <if test="record.resource != null" >
   	  AND resource = #{record.resource,jdbcType=INTEGER}
     </if>
      
       <if test="record.payStatus != null &amp;&amp; record.payStatus != ''" >
      AND pay_status = #{record.payStatus,jdbcType=VARCHAR}
      </if>
      
      <if test="record.channelId != null" >
   	  AND chanelid = #{record.channelId,jdbcType=INTEGER}
     </if>
				
  </select>
  
   <select id="getOrderNoByTradeNo" resultType="com.plateno.booking.internal.base.model.bill.BillOrderDetail">
			
		select  
		orders.order_no as orderNo,
		orders.pay_status as status,
		orders.id as orderId,
		paylog.trand_no as tradeNo,      
		orders.member_id as memberId,
		orders.pay_type as payId
		
		FROM 
		
		order_pay_log as paylog
		
		LEFT JOIN m_order as orders on orders.id=paylog.order_id
		where paylog.trand_no=#{tradeNo,jdbcType=VARCHAR}
  </select>
  
  
   <select id="getPruSellAmountByPreDay" resultType="com.plateno.booking.internal.base.model.bill.ProdSellAmountData">
		SELECT
			d.product_id  as productId,
			SUM(sku_count) as sellCount
		FROM
		m_order AS m
			LEFT JOIN m_order_product AS d ON m.order_no = d.order_no
		WHERE
			m.pay_status='5'
		and  m.up_time &gt;  date_sub(now(), interval #{days,jdbcType=INTEGER} day)
		GROUP BY d.product_id
		
  </select>
</mapper>